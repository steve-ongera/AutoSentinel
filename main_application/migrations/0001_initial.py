# Generated by Django 5.2.4 on 2025-10-06 20:45

import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='DataProvider',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255, unique=True)),
                ('provider_type', models.CharField(choices=[('vin_decoder', 'VIN Decoder'), ('dmv', 'DMV'), ('insurance', 'Insurance Company'), ('ncib', 'NCIB (Theft Database)'), ('police', 'Police Department'), ('service', 'Service Records')], max_length=20)),
                ('api_endpoint', models.URLField(blank=True, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('api_key', models.CharField(blank=True, max_length=255, null=True)),
                ('api_secret', models.CharField(blank=True, max_length=255, null=True)),
                ('rate_limit_per_hour', models.IntegerField(default=1000)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'data_providers',
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('role', models.CharField(choices=[('guest', 'Guest'), ('verified_buyer', 'Verified Buyer'), ('dealer', 'Dealer'), ('fleet_admin', 'Fleet Administrator'), ('auditor', 'Auditor'), ('system_admin', 'System Administrator')], default='guest', max_length=20)),
                ('phone_number', models.CharField(blank=True, max_length=20, null=True)),
                ('company_name', models.CharField(blank=True, max_length=255, null=True)),
                ('verified_at', models.DateTimeField(blank=True, null=True)),
                ('consent_to_data_usage', models.BooleanField(default=False)),
                ('consent_date', models.DateTimeField(blank=True, null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'db_table': 'users',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Vehicle',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('vin', models.CharField(db_index=True, max_length=17, unique=True, validators=[django.core.validators.RegexValidator('^[A-HJ-NPR-Z0-9]{17}$', 'Invalid VIN format')])),
                ('make', models.CharField(db_index=True, max_length=100)),
                ('model', models.CharField(db_index=True, max_length=100)),
                ('year', models.IntegerField(validators=[django.core.validators.MinValueValidator(1900), django.core.validators.MaxValueValidator(2100)])),
                ('trim', models.CharField(blank=True, max_length=100, null=True)),
                ('body_style', models.CharField(blank=True, max_length=50, null=True)),
                ('color', models.CharField(blank=True, max_length=50, null=True)),
                ('engine', models.CharField(blank=True, max_length=100, null=True)),
                ('transmission', models.CharField(blank=True, max_length=100, null=True)),
                ('drivetrain', models.CharField(blank=True, max_length=50, null=True)),
                ('fuel_type', models.CharField(blank=True, max_length=50, null=True)),
                ('displacement', models.DecimalField(blank=True, decimal_places=1, max_digits=4, null=True)),
                ('cylinders', models.IntegerField(blank=True, null=True)),
                ('manufacture_country', models.CharField(blank=True, max_length=100, null=True)),
                ('manufacture_plant', models.CharField(blank=True, max_length=100, null=True)),
                ('manufacture_date', models.DateField(blank=True, null=True)),
                ('current_mileage', models.IntegerField(validators=[django.core.validators.MinValueValidator(0)])),
                ('current_title_status', models.CharField(choices=[('clean', 'Clean'), ('salvage', 'Salvage'), ('rebuilt', 'Rebuilt'), ('junk', 'Junk'), ('flood', 'Flood Damage'), ('hail', 'Hail Damage'), ('lemon', 'Lemon Law Buyback')], default='clean', max_length=20)),
                ('is_stolen', models.BooleanField(db_index=True, default=False)),
                ('current_owner_count', models.IntegerField(default=1, validators=[django.core.validators.MinValueValidator(1)])),
                ('consenting_for_tracking', models.BooleanField(db_index=True, default=False)),
                ('tracking_consent_date', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('last_reported_at', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'db_table': 'vehicles',
                'indexes': [models.Index(fields=['make', 'model', 'year'], name='vehicles_make_f7084a_idx'), models.Index(fields=['current_title_status'], name='vehicles_current_a67c2b_idx'), models.Index(fields=['is_stolen'], name='vehicles_is_stol_3d5238_idx'), models.Index(fields=['consenting_for_tracking'], name='vehicles_consent_faba2d_idx')],
            },
        ),
        migrations.CreateModel(
            name='TitleEvent',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('event_type', models.CharField(choices=[('initial', 'Initial Title'), ('transfer', 'Ownership Transfer'), ('brand_change', 'Title Brand Change'), ('duplicate', 'Duplicate Title Issued'), ('lien_add', 'Lien Added'), ('lien_release', 'Lien Released')], max_length=20)),
                ('event_date', models.DateField(db_index=True)),
                ('title_status', models.CharField(choices=[('clean', 'Clean'), ('salvage', 'Salvage'), ('rebuilt', 'Rebuilt'), ('junk', 'Junk'), ('flood', 'Flood Damage'), ('hail', 'Hail Damage'), ('lemon', 'Lemon Law Buyback')], max_length=20)),
                ('state', models.CharField(max_length=2)),
                ('title_number', models.CharField(blank=True, max_length=50, null=True)),
                ('odometer_reading', models.IntegerField(blank=True, null=True)),
                ('odometer_unit', models.CharField(default='miles', max_length=10)),
                ('notes', models.TextField(blank=True, null=True)),
                ('source', models.CharField(max_length=100)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('vehicle', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='title_events', to='main_application.vehicle')),
            ],
            options={
                'db_table': 'title_events',
                'ordering': ['-event_date'],
            },
        ),
        migrations.CreateModel(
            name='TheftRecord',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('status', models.CharField(choices=[('reported', 'Reported Stolen'), ('recovered', 'Recovered'), ('closed', 'Case Closed')], default='reported', max_length=20)),
                ('reported_date', models.DateField(db_index=True)),
                ('recovered_date', models.DateField(blank=True, null=True)),
                ('reporting_agency', models.CharField(max_length=255)),
                ('case_number', models.CharField(blank=True, max_length=100, null=True)),
                ('theft_location_city', models.CharField(blank=True, max_length=100, null=True)),
                ('theft_location_state', models.CharField(blank=True, max_length=2, null=True)),
                ('notes', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('vehicle', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='theft_records', to='main_application.vehicle')),
            ],
            options={
                'db_table': 'theft_records',
                'ordering': ['-reported_date'],
            },
        ),
        migrations.CreateModel(
            name='TelemetryTrace',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('timestamp', models.DateTimeField(db_index=True)),
                ('latitude', models.DecimalField(decimal_places=6, max_digits=9)),
                ('longitude', models.DecimalField(decimal_places=6, max_digits=9)),
                ('accuracy', models.FloatField(blank=True, null=True)),
                ('speed', models.FloatField(blank=True, null=True)),
                ('heading', models.FloatField(blank=True, null=True)),
                ('altitude', models.FloatField(blank=True, null=True)),
                ('odometer', models.IntegerField(blank=True, null=True)),
                ('device_id', models.CharField(blank=True, max_length=100, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('vehicle', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='telemetry_traces', to='main_application.vehicle')),
            ],
            options={
                'db_table': 'telemetry_traces',
                'ordering': ['-timestamp'],
            },
        ),
        migrations.CreateModel(
            name='SearchQuery',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('search_type', models.CharField(choices=[('vin', 'VIN'), ('plate', 'License Plate'), ('make_model', 'Make/Model')], max_length=20)),
                ('query_text', models.CharField(db_index=True, max_length=255)),
                ('results_count', models.IntegerField(default=0)),
                ('response_time_ms', models.IntegerField(blank=True, null=True)),
                ('cache_hit', models.BooleanField(default=False)),
                ('ip_address', models.GenericIPAddressField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='searches', to=settings.AUTH_USER_MODEL)),
                ('vehicle_found', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='searches', to='main_application.vehicle')),
            ],
            options={
                'db_table': 'search_queries',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='ProviderDataFeed',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('processing', 'Processing'), ('completed', 'Completed'), ('failed', 'Failed')], default='pending', max_length=20)),
                ('request_payload', models.JSONField(blank=True, null=True)),
                ('response_data', models.JSONField(blank=True, null=True)),
                ('error_message', models.TextField(blank=True, null=True)),
                ('requested_at', models.DateTimeField(auto_now_add=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('provider', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='feeds', to='main_application.dataprovider')),
                ('vehicle', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='provider_feeds', to='main_application.vehicle')),
            ],
            options={
                'db_table': 'provider_data_feeds',
                'ordering': ['-requested_at'],
            },
        ),
        migrations.CreateModel(
            name='OwnershipRecord',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('owner_sequence', models.IntegerField()),
                ('owner_type', models.CharField(choices=[('individual', 'Individual'), ('fleet', 'Fleet'), ('rental', 'Rental Company'), ('lease', 'Lease Company'), ('government', 'Government'), ('dealer', 'Dealer')], max_length=20)),
                ('ownership_start', models.DateField(db_index=True)),
                ('ownership_end', models.DateField(blank=True, db_index=True, null=True)),
                ('is_current', models.BooleanField(default=False)),
                ('state', models.CharField(blank=True, max_length=2, null=True)),
                ('ownership_duration_days', models.IntegerField(blank=True, null=True)),
                ('owner_hash', models.CharField(blank=True, max_length=64, null=True)),
                ('consented_to_tracking', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('vehicle', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ownership_records', to='main_application.vehicle')),
            ],
            options={
                'db_table': 'ownership_records',
                'ordering': ['owner_sequence'],
            },
        ),
        migrations.CreateModel(
            name='MileageRecord',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('recorded_date', models.DateField(db_index=True)),
                ('mileage', models.IntegerField(validators=[django.core.validators.MinValueValidator(0)])),
                ('unit', models.CharField(default='miles', max_length=10)),
                ('source', models.CharField(choices=[('dmv', 'DMV Registration'), ('inspection', 'State Inspection'), ('service', 'Service Record'), ('dealer', 'Dealer Service'), ('insurance', 'Insurance'), ('sale', 'Sale Transaction'), ('crowdsourced', 'User Reported')], max_length=20)),
                ('source_detail', models.CharField(blank=True, max_length=255, null=True)),
                ('is_rollback_suspected', models.BooleanField(default=False)),
                ('verified', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('vehicle', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='mileage_records', to='main_application.vehicle')),
            ],
            options={
                'db_table': 'mileage_records',
                'ordering': ['recorded_date'],
            },
        ),
        migrations.CreateModel(
            name='CrowdsourcedReport',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('report_type', models.CharField(choices=[('sighting', 'Vehicle Sighting'), ('condition', 'Condition Report'), ('maintenance', 'Maintenance Record'), ('accident', 'Accident Report'), ('theft', 'Theft Report'), ('for_sale', 'For Sale Listing'), ('other', 'Other')], max_length=20)),
                ('status', models.CharField(choices=[('pending', 'Pending Review'), ('verified', 'Verified'), ('rejected', 'Rejected'), ('duplicate', 'Duplicate')], default='pending', max_length=20)),
                ('report_date', models.DateField()),
                ('description', models.TextField()),
                ('location_city', models.CharField(blank=True, max_length=100, null=True)),
                ('location_state', models.CharField(blank=True, max_length=2, null=True)),
                ('verified_at', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('submitted_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='submitted_reports', to=settings.AUTH_USER_MODEL)),
                ('verified_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='verified_reports', to=settings.AUTH_USER_MODEL)),
                ('vehicle', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='crowdsourced_reports', to='main_application.vehicle')),
            ],
            options={
                'db_table': 'crowdsourced_reports',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='AuditLog',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('action', models.CharField(choices=[('view', 'View'), ('search', 'Search'), ('create', 'Create'), ('update', 'Update'), ('delete', 'Delete'), ('export', 'Export'), ('access_restricted', 'Access Restricted Data')], max_length=30)),
                ('resource_type', models.CharField(max_length=50)),
                ('resource_id', models.UUIDField(blank=True, null=True)),
                ('field_accessed', models.CharField(blank=True, max_length=100, null=True)),
                ('ip_address', models.GenericIPAddressField(blank=True, null=True)),
                ('user_agent', models.TextField(blank=True, null=True)),
                ('metadata', models.JSONField(blank=True, null=True)),
                ('timestamp', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='audit_logs', to=settings.AUTH_USER_MODEL)),
                ('vehicle', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='audit_logs', to='main_application.vehicle')),
            ],
            options={
                'db_table': 'audit_logs',
                'ordering': ['-timestamp'],
            },
        ),
        migrations.CreateModel(
            name='AccidentRecord',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('accident_date', models.DateField(db_index=True)),
                ('severity', models.CharField(choices=[('minor', 'Minor'), ('moderate', 'Moderate'), ('severe', 'Severe'), ('total_loss', 'Total Loss')], max_length=20)),
                ('source', models.CharField(choices=[('insurance', 'Insurance Claim'), ('police', 'Police Report'), ('repair_shop', 'Repair Shop'), ('crowdsourced', 'User Reported')], max_length=20)),
                ('damage_description', models.TextField(blank=True, null=True)),
                ('estimated_damage_cost', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('location_city', models.CharField(blank=True, max_length=100, null=True)),
                ('location_state', models.CharField(blank=True, max_length=2, null=True)),
                ('airbag_deployed', models.BooleanField(default=False)),
                ('is_structural_damage', models.BooleanField(default=False)),
                ('report_number', models.CharField(blank=True, max_length=100, null=True)),
                ('verified', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('vehicle', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='accidents', to='main_application.vehicle')),
            ],
            options={
                'db_table': 'accident_records',
                'ordering': ['-accident_date'],
            },
        ),
        migrations.CreateModel(
            name='VehicleRegistration',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('plate_number', models.CharField(db_index=True, max_length=20)),
                ('state', models.CharField(max_length=2)),
                ('country', models.CharField(default='US', max_length=2)),
                ('issued_date', models.DateField()),
                ('expiry_date', models.DateField(blank=True, null=True)),
                ('is_current', models.BooleanField(db_index=True, default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('vehicle', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='registrations', to='main_application.vehicle')),
            ],
            options={
                'db_table': 'vehicle_registrations',
            },
        ),
        migrations.CreateModel(
            name='VehicleReport',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('status', models.CharField(choices=[('pending', 'Pending Generation'), ('processing', 'Processing'), ('completed', 'Completed'), ('failed', 'Failed')], default='pending', max_length=20)),
                ('is_paid', models.BooleanField(default=False)),
                ('price', models.DecimalField(decimal_places=2, default=0, max_digits=8)),
                ('include_telemetry', models.BooleanField(default=False)),
                ('include_owner_history', models.BooleanField(default=True)),
                ('pdf_file', models.FileField(blank=True, null=True, upload_to='reports/pdf/')),
                ('json_data', models.JSONField(blank=True, null=True)),
                ('generation_started_at', models.DateTimeField(blank=True, null=True)),
                ('generation_completed_at', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('requested_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='requested_reports', to=settings.AUTH_USER_MODEL)),
                ('vehicle', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reports', to='main_application.vehicle')),
            ],
            options={
                'db_table': 'vehicle_reports',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='ReportPurchase',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('amount', models.DecimalField(decimal_places=2, max_digits=8)),
                ('payment_status', models.CharField(choices=[('pending', 'Pending'), ('completed', 'Completed'), ('failed', 'Failed'), ('refunded', 'Refunded')], default='pending', max_length=20)),
                ('payment_method', models.CharField(default='credit_card', max_length=50)),
                ('transaction_id', models.CharField(blank=True, max_length=100, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='purchases', to=settings.AUTH_USER_MODEL)),
                ('report', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='purchase', to='main_application.vehiclereport')),
            ],
            options={
                'db_table': 'report_purchases',
            },
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['role'], name='users_role_0ace22_idx'),
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['email'], name='users_email_4b85f2_idx'),
        ),
        migrations.AddIndex(
            model_name='titleevent',
            index=models.Index(fields=['vehicle', '-event_date'], name='title_event_vehicle_661f59_idx'),
        ),
        migrations.AddIndex(
            model_name='titleevent',
            index=models.Index(fields=['title_status'], name='title_event_title_s_8c8a8f_idx'),
        ),
        migrations.AddIndex(
            model_name='theftrecord',
            index=models.Index(fields=['vehicle', 'status'], name='theft_recor_vehicle_6df79e_idx'),
        ),
        migrations.AddIndex(
            model_name='theftrecord',
            index=models.Index(fields=['reported_date'], name='theft_recor_reporte_993ddb_idx'),
        ),
        migrations.AddIndex(
            model_name='telemetrytrace',
            index=models.Index(fields=['vehicle', '-timestamp'], name='telemetry_t_vehicle_dbea15_idx'),
        ),
        migrations.AddIndex(
            model_name='telemetrytrace',
            index=models.Index(fields=['timestamp'], name='telemetry_t_timesta_8be4f6_idx'),
        ),
        migrations.AddIndex(
            model_name='searchquery',
            index=models.Index(fields=['query_text'], name='search_quer_query_t_f8c040_idx'),
        ),
        migrations.AddIndex(
            model_name='searchquery',
            index=models.Index(fields=['user', '-created_at'], name='search_quer_user_id_486cee_idx'),
        ),
        migrations.AddIndex(
            model_name='searchquery',
            index=models.Index(fields=['-created_at'], name='search_quer_created_824a49_idx'),
        ),
        migrations.AddIndex(
            model_name='providerdatafeed',
            index=models.Index(fields=['provider', '-requested_at'], name='provider_da_provide_a515b8_idx'),
        ),
        migrations.AddIndex(
            model_name='providerdatafeed',
            index=models.Index(fields=['status'], name='provider_da_status_c38510_idx'),
        ),
        migrations.AddIndex(
            model_name='ownershiprecord',
            index=models.Index(fields=['vehicle', 'owner_sequence'], name='ownership_r_vehicle_ff6168_idx'),
        ),
        migrations.AddIndex(
            model_name='ownershiprecord',
            index=models.Index(fields=['is_current'], name='ownership_r_is_curr_ed4ba0_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='ownershiprecord',
            unique_together={('vehicle', 'owner_sequence')},
        ),
        migrations.AddIndex(
            model_name='mileagerecord',
            index=models.Index(fields=['vehicle', 'recorded_date'], name='mileage_rec_vehicle_7a62f0_idx'),
        ),
        migrations.AddIndex(
            model_name='mileagerecord',
            index=models.Index(fields=['is_rollback_suspected'], name='mileage_rec_is_roll_491580_idx'),
        ),
        migrations.AddIndex(
            model_name='crowdsourcedreport',
            index=models.Index(fields=['vehicle', 'status'], name='crowdsource_vehicle_057ec0_idx'),
        ),
        migrations.AddIndex(
            model_name='crowdsourcedreport',
            index=models.Index(fields=['report_type'], name='crowdsource_report__cc4d55_idx'),
        ),
        migrations.AddIndex(
            model_name='crowdsourcedreport',
            index=models.Index(fields=['status'], name='crowdsource_status_e5ebf1_idx'),
        ),
        migrations.AddIndex(
            model_name='auditlog',
            index=models.Index(fields=['user', '-timestamp'], name='audit_logs_user_id_e11c73_idx'),
        ),
        migrations.AddIndex(
            model_name='auditlog',
            index=models.Index(fields=['action', '-timestamp'], name='audit_logs_action_f48619_idx'),
        ),
        migrations.AddIndex(
            model_name='auditlog',
            index=models.Index(fields=['vehicle', '-timestamp'], name='audit_logs_vehicle_b516d8_idx'),
        ),
        migrations.AddIndex(
            model_name='auditlog',
            index=models.Index(fields=['resource_type', 'resource_id'], name='audit_logs_resourc_bda8a6_idx'),
        ),
        migrations.AddIndex(
            model_name='accidentrecord',
            index=models.Index(fields=['vehicle', '-accident_date'], name='accident_re_vehicle_337367_idx'),
        ),
        migrations.AddIndex(
            model_name='accidentrecord',
            index=models.Index(fields=['severity'], name='accident_re_severit_31b506_idx'),
        ),
        migrations.AddIndex(
            model_name='accidentrecord',
            index=models.Index(fields=['verified'], name='accident_re_verifie_8ad239_idx'),
        ),
        migrations.AddIndex(
            model_name='vehicleregistration',
            index=models.Index(fields=['plate_number', 'state'], name='vehicle_reg_plate_n_fde5be_idx'),
        ),
        migrations.AddIndex(
            model_name='vehicleregistration',
            index=models.Index(fields=['is_current'], name='vehicle_reg_is_curr_6719c7_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='vehicleregistration',
            unique_together={('plate_number', 'state', 'country')},
        ),
        migrations.AddIndex(
            model_name='vehiclereport',
            index=models.Index(fields=['vehicle', '-created_at'], name='vehicle_rep_vehicle_7ec1a0_idx'),
        ),
        migrations.AddIndex(
            model_name='vehiclereport',
            index=models.Index(fields=['requested_by', '-created_at'], name='vehicle_rep_request_ee7a87_idx'),
        ),
        migrations.AddIndex(
            model_name='vehiclereport',
            index=models.Index(fields=['status'], name='vehicle_rep_status_ded475_idx'),
        ),
        migrations.AddIndex(
            model_name='reportpurchase',
            index=models.Index(fields=['user', '-created_at'], name='report_purc_user_id_f27d98_idx'),
        ),
        migrations.AddIndex(
            model_name='reportpurchase',
            index=models.Index(fields=['payment_status'], name='report_purc_payment_034f5a_idx'),
        ),
    ]
